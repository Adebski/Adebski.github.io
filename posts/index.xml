<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on ItDepends</title><link>https://blog.adebski.com/posts/</link><description>ItDepends (Posts)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 07 Mar 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.adebski.com/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>How to share bash history between terminal sessions</title><link>https://blog.adebski.com/posts/sharing-command-history-between-terminal-sessions/</link><pubDate>Fri, 07 Mar 2025 00:00:00 +0000</pubDate><guid>https://blog.adebski.com/posts/sharing-command-history-between-terminal-sessions/</guid><description>This is a quick guide how to set up your bash shell to access the same history of commands throughout terminal sessions</description></item><item><title>JSON deserialization to custom objects with Jackson part 1 - fields</title><link>https://blog.adebski.com/posts/jackson-deserialization-field-setters/</link><pubDate>Sat, 25 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.adebski.com/posts/jackson-deserialization-field-setters/</guid><description>This is the first post in the series where I look at the most common mechanisms Jackson uses to deserialize JSON document and represent it as a custom type.
In this post, I focus on cases where Jackson uses a no-arg constructor to instantiate the class and values are injected directly to fields.</description></item><item><title>An (incomplete) list of static analysis tools for Java</title><link>https://blog.adebski.com/posts/incomplete-list-of-static-analysis-tools-for-java/</link><pubDate>Sat, 22 May 2021 00:00:00 +0000</pubDate><guid>https://blog.adebski.com/posts/incomplete-list-of-static-analysis-tools-for-java/</guid><description>This post describes some of the static analysis tools I&amp;rsquo;ve used in various Java projects over the years. In the last couple of days I&amp;rsquo;ve been setting up projects from scratch and decided it would be nice to organize some of the knowledge in a single place. Apart from discussing the tools themselves I also describe why it makes sense to include them in your next (or current) project.</description></item><item><title>A case of Apache HTTP client becoming unusable due to java.lang.OutOfMemoryError</title><link>https://blog.adebski.com/posts/apache-http-client-shutting-down/</link><pubDate>Sat, 27 Feb 2021 00:00:00 +0000</pubDate><guid>https://blog.adebski.com/posts/apache-http-client-shutting-down/</guid><description>This post describes a problem where an instance of the Apache HTTP client becomes unusable if the JVM throws a &lt;code>java.lang.Error&lt;/code> when executing the library code and possible ways of dealing with that situation.</description></item><item><title>Exploring different ways of storing a system configuration. Part 1 - How about Google Protocol Buffers?</title><link>https://blog.adebski.com/posts/protobuf-configuration-part-1/</link><pubDate>Tue, 22 Dec 2020 00:00:00 +0000</pubDate><guid>https://blog.adebski.com/posts/protobuf-configuration-part-1/</guid><description>This is the first post in a series that explores different ways of storing a system configuration. In this post I define the term &amp;ldquo;system configuration&amp;rdquo; and describe how we can leverage Google Protocol Buffers (an unlikely candidate) to store such configuration.</description></item></channel></rss>